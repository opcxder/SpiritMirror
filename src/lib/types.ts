/**
 * TypeScript Type Definitions for Spirit Animal Discovery Website
 * 
 * This file contains all the core interfaces and types used throughout the application.
 * It defines the structure for questions, spirit animals, quiz responses, and scoring.
 * 
 * Author: Spirit Animal Discovery Team
 * Date: 2024
 * Purpose: Central type definitions for type safety and code clarity
 */

// ============================================================================
// CORE INTERFACES
// ============================================================================

/**
 * Represents a single quiz question with multiple choice options
 * Used in the quiz flow to display questions and collect user responses
 */
export interface Question {
  id: string;                    // Unique identifier for the question
  text: string;                  // The question text displayed to the user
  category: QuestionCategory;    // Category this question belongs to
  options: QuestionOption[];     // Array of answer options (A, B, C, D, E, F)
  order: number;                 // Display order in the quiz
}

/**
 * Represents a single answer option within a question
 * Contains the option text and scoring points for each spirit animal
 */
export interface QuestionOption {
  id: string;                    // Option identifier (A, B, C, D, E, F)
  text: string;                  // The option text displayed to the user
  points: { [animalName: string]: number }; // Points awarded to each animal for this option
}

/**
 * Categories of questions used to organize the quiz content
 * Helps ensure balanced coverage of different personality aspects
 */
export type QuestionCategory = 
  | 'behavioral'      // How user responds to challenges and situations
  | 'social'          // Social preferences and group dynamics
  | 'environmental'   // Environmental and habitat preferences
  | 'decision-making' // How user makes important decisions
  | 'motivation'      // What drives and motivates the user
  | 'conflict';       // How user handles conflicts and disagreements

/**
 * Represents a user's response to a quiz question
 * Stored during quiz progression and used for final scoring
 */
export interface QuestionResponse {
  questionId: string;            // ID of the question that was answered
  selectedOption: string;        // The option the user selected (A, B, C, D, E, F, 'unknown', 'skip')
  points: { [animalName: string]: number }; // Points earned for each animal
  timestamp: number;             // When the response was recorded
}

/**
 * Complete spirit animal profile with all detailed information
 * Used for displaying results and animal encyclopedia pages
 */
export interface SpiritAnimal {
  id: string;                    // Unique identifier (e.g., 'wolf', 'eagle')
  name: string;                  // Display name (e.g., 'Wolf', 'Eagle')
  scientificName: string;        // Scientific name (e.g., 'Canis lupus')
  primaryTraits: string[];       // Main personality traits (e.g., ['Leadership', 'Loyalty'])
  description: string;           // Detailed description of the animal's meaning
  strengths: string[];           // Positive qualities and strengths
  challenges: string[];          // Potential challenges or weaknesses
  lifeLesson: string;            // Key life lesson this animal teaches
  mythologyBackground: string;   // Cultural and mythological significance
  colorSymbolism: string;        // Colors associated with this animal
  compatibleAnimals: string[];   // Other animals that work well together
  imageUrl: string;              // URL to the animal's image
  habitat: string;               // Natural habitat description
  culturalSignificance: string[]; // Cultural meanings across different traditions
  tier: AnimalTier;              // Classification tier (1-4)
}

/**
 * Classification tiers for spirit animals based on their universal appeal
 * Used for organizing animals in the database and result display
 */
export type AnimalTier = 1 | 2 | 3 | 4;

/**
 * Represents the calculated score for a spirit animal
 * Generated by the scoring algorithm based on user responses
 */
export interface SpiritAnimalScore {
  animalName: string;            // Name of the spirit animal
  totalPoints: number;           // Total points accumulated
  categoryBreakdown: { [category: string]: number }; // Points by question category
  confidence: number;            // Confidence level (0-1) based on answered questions
}

/**
 * Final quiz result with primary and optional secondary spirit animal
 * Returned by the scoring algorithm as the user's result
 */
export interface QuizResult {
  primary: SpiritAnimalScore;    // The user's primary spirit animal
  secondary?: SpiritAnimalScore; // Optional secondary animal (if close score)
  confidence: 'high' | 'medium' | 'low'; // Overall confidence in the result
  totalQuestionsAnswered: number; // How many questions the user answered
  skippedQuestions: number;      // How many questions were skipped
}

// ============================================================================
// COMPONENT PROPS INTERFACES
// ============================================================================

/**
 * Props for the main QuizFlow component
 * Used to pass quiz data and completion handler to the quiz component
 */
export interface QuizFlowProps {
  questions: Question[];         // Array of questions to display
  onComplete: (responses: QuestionResponse[]) => void; // Callback when quiz is finished
  onSkip?: () => void;          // Optional callback for skip functionality
}

/**
 * Props for the ResultDisplay component
 * Used to display the user's spirit animal result with detailed information
 */
export interface ResultDisplayProps {
  result: QuizResult;            // The calculated quiz result
  primaryAnimal: SpiritAnimal;   // The primary spirit animal data
  secondaryAnimal?: SpiritAnimal | null; // Optional secondary spirit animal data
  onRetake?: () => void;         // Optional callback to retake the quiz
  onShare: () => void;           // Required callback for sharing results
}

/**
 * Props for individual question components
 * Used to display a single question with its options
 */
export interface QuestionProps {
  question: Question;            // The question to display
  onAnswer: (optionId: string) => void; // Callback when user selects an option
  onSkip: () => void;           // Callback when user skips the question
  questionNumber: number;        // Current question number (for progress display)
  totalQuestions: number;        // Total number of questions
  previouslySelected?: string;   // Previously selected option ID (for going back)
  isReviewing?: boolean;         // Whether user is reviewing a previous question
}

// ============================================================================
// UTILITY TYPES
// ============================================================================

/**
 * Configuration object for the scoring algorithm
 * Allows customization of scoring behavior and thresholds
 */
export interface ScoringConfig {
  minQuestionsForResult: number; // Minimum questions needed for a valid result
  confidenceThresholds: {        // Thresholds for confidence levels
    high: number;                // High confidence threshold
    medium: number;              // Medium confidence threshold
  };
  secondaryAnimalThreshold: number; // Threshold for showing secondary animal
}

/**
 * Progress tracking for the quiz
 * Used to display progress bars and navigation
 */
export interface QuizProgress {
  currentQuestion: number;       // Current question index (0-based)
  totalQuestions: number;        // Total number of questions
  answeredQuestions: number;     // Number of questions answered
  skippedQuestions: number;      // Number of questions skipped
  progressPercentage: number;    // Progress as percentage (0-100)
}

/**
 * Error handling types for robust error management
 */
export interface QuizError {
  type: 'validation' | 'calculation' | 'network' | 'unknown';
  message: string;
  details?: any;
}

// ============================================================================
// CONSTANTS AND ENUMS
// ============================================================================

/**
 * Available answer options for quiz questions
 * Standardized options that can be selected by users
 */
export const ANSWER_OPTIONS = {
  A: 'A',
  B: 'B', 
  C: 'C',
  D: 'D',
  E: 'E',
  F: 'F',
  UNKNOWN: 'unknown',    // "I don't know yet" option
  SKIP: 'skip'          // Skip this question option
} as const;

/**
 * Confidence levels for quiz results
 * Used to determine how certain the algorithm is about the result
 */
export const CONFIDENCE_LEVELS = {
  HIGH: 'high',         // 80%+ questions answered, clear winner
  MEDIUM: 'medium',     // 60%+ questions answered, moderate winner  
  LOW: 'low'           // <60% questions answered or tie scenario
} as const;

/**
 * Default configuration values for the application
 * Can be overridden for different environments or requirements
 */
export const DEFAULT_CONFIG: ScoringConfig = {
  minQuestionsForResult: 5,      // Minimum 5 questions for basic result
  confidenceThresholds: {
    high: 0.8,                   // 80% questions answered = high confidence
    medium: 0.6                  // 60% questions answered = medium confidence
  },
  secondaryAnimalThreshold: 0.7  // Show secondary if within 70% of primary score
};
